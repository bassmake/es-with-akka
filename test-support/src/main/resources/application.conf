akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  loglevel = "INFO"
  actor {

    serializers {
      java = "akka.serialization.JavaSerializer"
//      proto = "akka.remote.serialization.ProtobufSerializer"
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }

    allow-java-serialization = off
    serialization-bindings {
      "java.io.Serializable" = none
      "sk.bsmk.customer.events.CustomerAccountEvent" = kryo
      "sk.bsmk.customer.CustomerAccount" = kryo
    }

    // only for test
    //    serialize-messages = on
    //    serialize-creators = on
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
      unhandled = on
    }
  }

  http {
    host-connection-pool {
      max-retries = 0
    }
  }

  persistence {
    journal {
      plugin: "jdbc-journal"
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
    }
  }
}

jdbc-journal {
  slick = ${slick}
  slick.db.numThreads = 20
  slick.db.maxConnections = 100
  slick.db.minConnections = 1
  slick.db.connectionTimeout = 1800000 // 30 minutes

  event-adapters {
    tagging = "sk.bsmk.customer.persistence.TaggingEventAdapter"
  }

  event-adapter-bindings {
    "sk.bsmk.customer.events.CustomerAccountEvent" = tagging
  }

}

jdbc-snapshot-store {
  slick = ${slick}
  slick.db.numThreads = 20
  slick.db.maxConnections = 100
  slick.db.minConnections = 1
  slick.db.connectionTimeout = 1800000 // 30 minutes
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  refresh-interval = "10ms"

  max-buffer-size = "500"

  slick = ${slick}
  slick.db.numThreads = 20
  slick.db.maxConnections = 100
  slick.db.minConnections = 1
  slick.db.connectionTimeout = 1800000 // 30 minutes
}

slick {
  profile = "slick.jdbc.H2Profile$"
  db {
    url = "jdbc:h2:file:./build/es-db;DATABASE_TO_UPPER=false;"
    user = "sa"
    //    password = "root"
    driver = "org.h2.Driver"
    connectionTestQuery = "SELECT 1"
  }
}
